#version 450
#pragma optimize(off)
#pragma debug(on)

layout(location = 01) uniform vec2          iResolution;                  // viewport resolution (in pixels)
layout(location = 02) uniform float         iGlobalTime;                  // shader playback time (in seconds)
layout(location = 03) uniform vec4          iMouse;                       // mouse pixel coords
layout(location = 04) uniform vec4          iDate;                        // (year, month, day, time in seconds)
layout(location = 05) uniform float         iSampleRate;                  // sound sample rate (i.e., 44100)
layout(location = 06) uniform vec3          iChannelResolution[4];        // channel resolution (in pixels)
layout(location = 10) uniform float         iChannelTime[4];              // channel playback time (in sec)
layout(location = 14) uniform vec2          ifFragCoordOffsetUniform;     // used for tiled based hq rendering
layout(location = 15) uniform float         iTimeDelta;                   // render time (in seconds)
layout(location = 16) uniform int           iFrame;                       // shader playback frame

layout(local_size_x=12, local_size_y=12, local_size_z=1) in;

layout(rgba32f, binding=0) uniform image2D  Channel0;
layout(rgba32f, binding=1) uniform image2D  Channel1;

#define seed 20

#define time iGlobalTime

float Interpolate(float x, float y, float a)
{
	float na	= 1.0 - a;
	float asq	= a * a;
	float nasq = na * na;
	float f1 = 3.0 * nasq - 2.0 * nasq * na;
    float f2 = 3.0 * asq - 2.0 * asq * a;

    return x * f1 + y * f2; //add the weighted factors
}

float Noise(int x, int y)
{
	int n = x + y * 57 + seed;
    n = (n << 13) ^ n;
	int t = (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff;	// = 2.147.483.647
	float f = t;
    f = f * 0.931322574615478515625e-9;									// * 0.9313e-9
	return f / 2;														// = 1.999999999068677425384521484375		
}

float Noise2(int x, int y)
{
    return fract(sin(dot(vec2(x,y), vec2(12.9898,78.233)))*43758.5453123);
}

float GetValue(vec2 i)
{
	float x = i.x;
	float y = i.y;
	
	int xi = int(x);
	int yi = int(y);
	float Xfrac = x - xi;
	float Yfrac = y - yi;

	float x0y0 = 0.5 * Noise2(xi,   yi);
	float x1y0 = 0.5 * Noise2(xi+1, yi);
	float x0y1 = 0.5 * Noise2(xi,   yi+1);
	float x1y1 = 0.5 * Noise2(xi+1, yi+1);
	
	//interpolate between those values according to the x and y fractions
	float v1 = Interpolate(x0y0, x1y0, Xfrac);
	float v2 = Interpolate(x0y1, x1y1, Xfrac);
	float ret = Interpolate(v1, v2, Yfrac);
	
    return ret;
}

// -----------------------------------------------

void main( )
{
    ivec2 Coord 		= ivec2(gl_GlobalInvocationID.xy);
    vec2 Resolution 	= vec2(imageSize(Channel0));
    vec2 p 				= vec2(Coord.xy / Resolution);
	vec2 uv 			= p*vec2(Resolution.x/Resolution.y,1.0);

	uv.y += (iGlobalTime * 0.2);
	
	float f0 = 2.00; float a0 = 1.0/f0;
	float f1 = 2*f0; float a1 = 1.0/f1;
	float f2 = 2*f1; float a2 = 1.0/f2;
	float f3 = 2*f2; float a3 = 1.0/f3;
	float f4 = 2*f3; float a4 = 1.0/f4;
	float f5 = 2*f4; float a5 = 1.0/f5;
	float f6 = 2*f5; float a6 = 1.0/f6;
	float f7 = 2*f6; float a7 = 1.0/f7;
	float f8 = 2*f7; float a8 = 1.0/f8;
	float f9 = 2*f8; float a9 = 1.0/f9;

	float n1=0.0, n2=0.0, n3=0.0, n4=0.0, n5=0.0, n6=0.0;
	float r1=0.0, r2=0.0, r3=0.0, r4=0.0, r5=0.0, r6=0.0;
	float s1=0.0, s2=0.0, s3=0.0, s4=0.0, s5=0.0, s6=0.0;

	vec2 so = vec2(256.0); 
	vec2 ro = vec2(512.0);

	n1 = a0*GetValue(f0*uv);
	n2 = a1*GetValue(f1*uv);
	n3 = a2*GetValue(f2*uv);
	n4 = a3*GetValue(f3*uv);
	n5 = a4*GetValue(f4*uv);
	n6 = a5*GetValue(f5*uv);

    vec4 Color0 = vec4( vec3(0.0, 0.0, n1 + n2 + n3 + n4 + n5 + n6), 1.0 );
	vec4 Color1 = vec4( vec3(n1 + n2 + n3 + n4 + n5 + n6, 0.0, 0.0), 1.0 );
	
    imageStore(Channel0, Coord, Color0);
	imageStore(Channel1, Coord, Color1);
}
